#!/usr/bin/python
# -*- coding: utf-8 -*-
"""Checks various metrics regarding environment in Canada.
"""
#
#
#     Copyright (C) 2012 Savoir-Faire Linux Inc.
#
#     This program is free software; you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation; either version 3 of the License, or
#     (at your option) any later version.
#
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program; if not, write to the Free Software
#     Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#     Projects :
#               SFL Shinken plugins
#
#     File :
#               check_env_canada.py Checks various metrics regarding environment in Canada.
#
#
#     Author: Matthieu Caneill <matthieu.caneill@savoirfairelinux.com>
#
#

# Generated with tools/create_new_plugin.sh

import getopt
import sys

import json
import urllib2

PLUGIN_NAME = "check_env_canada"
PLUGIN_VERSION = "0.1"
STATE_OK = 0
STATE_WARNING = 1
STATE_CRITICAL = 2
STATE_UNKNOWN = 3
STATE_DEPENDENT = 4


def print_version():
    """Show plugin version
    """
    version_msg = """
%s.py v%s (sfl-shinken-plugins)

The SFL Shinken Plugins come with ABSOLUTELY NO WARRANTY. You may redistribute
copies of the plugins under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING.
""" % (PLUGIN_NAME, PLUGIN_VERSION)
    print version_msg


def print_support():
    """Show plugin support
    """
    support_msg = """
Send email to <matthieu.caneill@savoirfairelinux.com> if you have questions
regarding use of this software. To submit patches or suggest improvements,
send email to <matthieu.caneill@savoirfairelinux.com>
Please include version information with all correspondence (when
possible, use output from the --version option of the plugin itself).
"""
    print support_msg


def print_usage():
    """Show how to use this plugin
    """
    usage_msg = """
%s.py -H <host> -w <warning> -c <critical>

Usage:
 -h, --help
    Print detailed help screen
 -U, --url=URL
    URL of data to fetch
 -m, --metric=STRING
    Name of the metric to use.
 -V, --version
    Print version information
 -w, --warning=DOUBLE
    Value to result in warning status (seconds)
 -c, --critical=DOUBLE
    Value to result in critical status (seconds)
""" % PLUGIN_NAME
    print usage_msg

def get_json(url):
    try:
        data = urllib2.urlopen(url)
    except Exception as e:
        print('Error while opening url: %s' % str(e))
        sys.exit(STATE_UNKNOWN)
    if data.getcode() >= 400:
        print('HTTP error: %d' % data.getcode())
        sys.exit(STATE_UNKNOWN)
    return data.read()

def get_data(args):
    """Fetch data
    """
    data = get_json(args['url'])
    try:
        data = json.loads(data)
    except Exception as e:
        print('Error loading json data: %s' % e)
        sys.exit(STATE_UNKNOWN)

    try:
        result = data['reports'][args['metric']]
    except Exception as e:
        print('Metric not found: %s' % args['metric'])
        sys.exit(STATE_UNKNOWN)

    if 'warning' in args.keys():
        # then we're working with numbers
        try:
            result = float(result)
        except Exception as e:
            print('Error, %s is not a number' % result)
            sys.exit(STATE_UNKNOWN)

        perfdata = ('%(label)s=%(num)s;%(warning)s;%(critic)s;0;'
                    % {'label': args['metric'],
                       'num': result,
                       'warning': float(args['warning']),
                       'critic': float(args['critical']),
                      })

        if result < float(args['warning']):
            print('OK - %s|%s' % (result, perfdata))
            sys.exit(STATE_OK)
        elif result < float(args['critical']):
            print('WARNING - %s|%s' % (result, perfdata))
            sys.exit(STATE_WARNING)
        else:
            print('CRITICAL - %s|%s' % (result, perfdata))
            sys.exit(STATE_CRITICAL)
    else:
        perfdata = ('%(label)s=%(num)s;;;0;'
                    % {'label': args['metric'],
                       'num': result,
                      })
        print('OK - %s|%s' % (result, perfdata))
        sys.exit(STATE_OK)

def check_arguments(args):
    """Check mandatory fields
    """
    mandatory_arguments = ['url',
                           'metric']
    for argument_name in mandatory_arguments:
        if not argument_name in args.keys():
            print "Argument '%s' is missing !" % argument_name
            print_usage()
            print_support()
            sys.exit(STATE_UNKNOWN)
    if 'warning' in args.keys() and 'critical' not in args.keys():
        print("Argument 'warning' without argument 'critical'!")
        sys.exit(STATE_UNKNOWN)
    if 'critical' in args.keys() and 'warning' not in args.keys():
        print("Argument 'critical' without argument 'warning'!")
        sys.exit(STATE_UNKNOWN)

def main():
    """Main function
    """
    try:
        options, args = getopt.getopt(sys.argv[1:],
                        'U:m:hVw:c:',
                        ['url=', 'metric=', 'help', 'version',
                         'warning=', 'critical='])
    except getopt.GetoptError, err:
        print str(err)
        print_usage()
        sys.exit(STATE_UNKNOWN)

    args = {}

    for option_name, value in options:
        if option_name in ("-U", "--url"):
            args['url'] = value
        elif option_name in ("-m", "--metric"):
            args['metric'] = value
        elif option_name in ("-w", "--warning"):
            args['warning'] = value
        elif option_name in ("-c", "--critical"):
            args['critical'] = value
        elif option_name in ("-h", "--help"):
            print_version()
            print_usage()
            print_support()
            sys.exit(STATE_UNKNOWN)
        elif option_name in ("-V", "--version"):
            print_version()
            print_support()
            sys.exit(STATE_UNKNOWN)

    check_arguments(args)

    get_data(args)


if __name__ == "__main__":
    main()
